// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: api/fueldata/fueldata.proto

package fueldata

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FuelDataClient is the client API for FuelData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FuelDataClient interface {
	QueryArea(ctx context.Context, in *Geofence, opts ...grpc.CallOption) (*StationItems, error)
	Upload(ctx context.Context, in *StationItems, opts ...grpc.CallOption) (*UploadedItems, error)
	DistinctBrands(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Brands, error)
}

type fuelDataClient struct {
	cc grpc.ClientConnInterface
}

func NewFuelDataClient(cc grpc.ClientConnInterface) FuelDataClient {
	return &fuelDataClient{cc}
}

func (c *fuelDataClient) QueryArea(ctx context.Context, in *Geofence, opts ...grpc.CallOption) (*StationItems, error) {
	out := new(StationItems)
	err := c.cc.Invoke(ctx, "/fueldata.FuelData/QueryArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuelDataClient) Upload(ctx context.Context, in *StationItems, opts ...grpc.CallOption) (*UploadedItems, error) {
	out := new(UploadedItems)
	err := c.cc.Invoke(ctx, "/fueldata.FuelData/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuelDataClient) DistinctBrands(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Brands, error) {
	out := new(Brands)
	err := c.cc.Invoke(ctx, "/fueldata.FuelData/DistinctBrands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FuelDataServer is the server API for FuelData service.
// All implementations must embed UnimplementedFuelDataServer
// for forward compatibility
type FuelDataServer interface {
	QueryArea(context.Context, *Geofence) (*StationItems, error)
	Upload(context.Context, *StationItems) (*UploadedItems, error)
	DistinctBrands(context.Context, *Empty) (*Brands, error)
	mustEmbedUnimplementedFuelDataServer()
}

// UnimplementedFuelDataServer must be embedded to have forward compatible implementations.
type UnimplementedFuelDataServer struct {
}

func (UnimplementedFuelDataServer) QueryArea(context.Context, *Geofence) (*StationItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryArea not implemented")
}
func (UnimplementedFuelDataServer) Upload(context.Context, *StationItems) (*UploadedItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedFuelDataServer) DistinctBrands(context.Context, *Empty) (*Brands, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DistinctBrands not implemented")
}
func (UnimplementedFuelDataServer) mustEmbedUnimplementedFuelDataServer() {}

// UnsafeFuelDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FuelDataServer will
// result in compilation errors.
type UnsafeFuelDataServer interface {
	mustEmbedUnimplementedFuelDataServer()
}

func RegisterFuelDataServer(s grpc.ServiceRegistrar, srv FuelDataServer) {
	s.RegisterService(&FuelData_ServiceDesc, srv)
}

func _FuelData_QueryArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Geofence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuelDataServer).QueryArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fueldata.FuelData/QueryArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuelDataServer).QueryArea(ctx, req.(*Geofence))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuelData_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StationItems)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuelDataServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fueldata.FuelData/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuelDataServer).Upload(ctx, req.(*StationItems))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuelData_DistinctBrands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuelDataServer).DistinctBrands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fueldata.FuelData/DistinctBrands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuelDataServer).DistinctBrands(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// FuelData_ServiceDesc is the grpc.ServiceDesc for FuelData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FuelData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fueldata.FuelData",
	HandlerType: (*FuelDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryArea",
			Handler:    _FuelData_QueryArea_Handler,
		},
		{
			MethodName: "Upload",
			Handler:    _FuelData_Upload_Handler,
		},
		{
			MethodName: "DistinctBrands",
			Handler:    _FuelData_DistinctBrands_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/fueldata/fueldata.proto",
}
